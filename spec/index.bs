<pre class='metadata'>
Title: eXtensible Spatial Markup Language
Repository: M-CreativeLab/jsar-dom
Status: UD
ED: https://m-creativelab.github.io/jsar-dom/spec
Shortname: web-xsml
Level: 1
Translation: zh-CN https://m-creativelab.github.io/jsar-dom/spec-zh
Editor: Yorkie Liu, Rokid LLC https://www.rokid.com, yorkiefixer@gmail.com
Abstract: This document describes an API to discover and communicate with devices
Abstract: over the Bluetooth 4 wireless standard using the Generic Attribute Profile (GATT).
Group: web-xsml-cg
Markup Shorthands: css no, markdown yes
</pre>

# Introduction # {#introduction}

*This section is non-normative.*

<a href="https://developer.bluetooth.org/">Bluetooth</a> is a standard for
short-range wireless communication between devices. Bluetooth "Classic" (<abbr
title="Basic Rate">BR</abbr>/<abbr title="Enhanced Data Rate">EDR</abbr>)
defines a set of binary protocols and supports speeds up to about 24Mbps.
Bluetooth 4.0 introduced a new "Low Energy" mode known as "Bluetooth Smart",
<abbr title="Bluetooth Low Energy">BLE</abbr>, or just <abbr title="Low
Energy">LE</abbr>
which is limited to about 1Mbps but allows devices to leave their transmitters
off most of the time. BLE provides most of its functionality through key/value
pairs provided by the <a lt="Generic Attribute Profile">Generic Attribute
Profile (<abbr title="Generic Attribute Profile">GATT</abbr>)</a>.

## Examples ## {#introduction-examples}

<div class="example" id="example-heart-rate-monitor">
To discover and retrieve data from a standard heart rate monitor,
a website would use code like the following:

<xmp highlight="html">
  <xsml>
    <head>
      <style>
        cube {
          rotation: 0 45 30;
        }
        plane {
          position: 0.25 0.5 -1;
        }
      </style>
    </head>
    <space>
      <cube />
      <plane height="0.5" width="1.5">
        <div>
          <span>Hello JSAR!</span>
          <span style="font-size: 50px;">Type your XSML in the below input</span>
        </div>
        <style type="text/css">
          div {
            display: flex;
            flex-direction: column;
            height: 100%;
            width: 100%;
            gap: 20px;
          }
          span {
            flex: 1;
            color: red;
            font-size: 150px;
            line-height: 1.5;
          }
        </style>
      </plane>
    </space>
  </xsml>
</xmp>

</div>

# Security considerations # {#security-and-privacy}

Issue(575): See <a href="#privacy"></a> section.

# Privacy considerations # {#privacy}

## Device access is powerful ## {#device-access-is-powerful}

When a website requests access to devices using {{Bluetooth/requestDevice()}},
it gets the ability to access all GATT services mentioned in the call. The UA
MUST inform the user what capabilities these services give the website before
asking which devices to entrust to it. If any services in the list aren't known
to the UA, the UA MUST assume they give the site complete control over the
device and inform the user of this risk. The UA MUST also allow the user to
inspect what sites have access to what devices and <a lt="revoke Bluetooth
access">revoke</a> these pairings.

# Device Discovery # {#device-discovery}

<xmp class="idl">
  dictionary BluetoothDataFilterInit {
    BufferSource dataPrefix;
    BufferSource mask;
  };

  dictionary BluetoothManufacturerDataFilterInit : BluetoothDataFilterInit {
    required [EnforceRange] unsigned short companyIdentifier;
  };

  dictionary BluetoothServiceDataFilterInit : BluetoothDataFilterInit {
    required BluetoothServiceUUID service;
  };

  dictionary BluetoothLEScanFilterInit {
    sequence<BluetoothServiceUUID> services;
    DOMString name;
    DOMString namePrefix;
    sequence<BluetoothManufacturerDataFilterInit> manufacturerData;
    sequence<BluetoothServiceDataFilterInit> serviceData;
  };

  dictionary RequestDeviceOptions {
    sequence<BluetoothLEScanFilterInit> filters;
    sequence<BluetoothLEScanFilterInit> exclusionFilters;
    sequence<BluetoothServiceUUID> optionalServices = [];
    sequence<unsigned short> optionalManufacturerData = [];
    boolean acceptAllDevices = false;
  };

  [Exposed=Window, SecureContext]
  interface Bluetooth : EventTarget {
    Promise<boolean> getAvailability();
    attribute EventHandler onavailabilitychanged;
    [SameObject]
    readonly attribute BluetoothDevice? referringDevice;
    Promise<sequence<BluetoothDevice>> getDevices();
    Promise<BluetoothDevice> requestDevice(optional RequestDeviceOptions options = {});
  };

  Bluetooth includes BluetoothDeviceEventHandlers;
  Bluetooth includes CharacteristicEventHandlers;
  Bluetooth includes ServiceEventHandlers;
</xmp>
