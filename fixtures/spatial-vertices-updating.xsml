<xsml>
  <head>
    <title>Morph Target Example</title>
    <style>
      @material example {
        material-type: physical-based;
        albedo-color: red;

      }
      icosphere {
        material: "example";
        animation: rotate 8s linear infinite;
      }
      @keyframes rotate {
        from {
          rotation: 0 0 0;
        }
        to {
          rotation: 0 360 0;
        }
      }
    </style>
  </head>
  <space>
    <icosphere radius="30" subdivisions="10" geometry-updatable="yes" />
    <script>
      const scene = spatialDocument.scene;
      const nucleus = spatialDocument.querySelector('icosphere')?.asNativeType();
      const noise = new Noise();

      function update() {
        const factor = Math.random() * 0.02;
        const vertices = nucleus.getVerticesData(BABYLON.VertexBuffer.PositionKind);

        vertices.forEach((v, index) => {
          const i = index * 3;
          const time = Date.now();
          let x = vertices[i];
          let y = vertices[i + 1];
          let z = vertices[i + 2];

          if (x === undefined || y === undefined || z === undefined) {
            return;
          }

          // normailize
          const length = Math.sqrt(x * x + y * y + z * z);
          x = x / length;
          y = y / length;
          z = z / length;

          x = x + Math.cos(time) * 0.0005;
          y = y + Math.cos(time) * 0.0003;
          z = z + Math.cos(time) * 0.0008;

          const distance = 1 - Math.sin(time * 0.005) * noise.simplex3(x, y, z) * factor;
          vertices[i] *= distance;
          vertices[i + 1] *= distance;
          vertices[i + 2] *= distance;
        });
        nucleus.updateVerticesData(BABYLON.VertexBuffer.PositionKind, vertices);
      }
      scene.registerBeforeRender(update);
    </script>
  </space>
</xsml>
